'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Download, FileText, Image as ImageIcon } from 'lucide-react'
import { toast } from 'sonner'

interface DataPoint {
  time: number
  [key: string]: number
}

interface DataExportProps {
  data: DataPoint[]
  title: string
  description?: string
}

export function DataExport({ data, title, description }: DataExportProps) {
  const exportToCSV = () => {
    if (data.length === 0) {
      toast.error('No data to export')
      return
    }

    // Get headers from first data point
    const headers = Object.keys(data[0])
    
    // Create CSV content
    const csvContent = [
      headers.join(','),
      ...data.map(row => headers.map(header => row[header]).join(','))
    ].join('\n')

    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)
    
    toast.success('Data exported successfully')
  }

  const exportToJSON = () => {
    if (data.length === 0) {
      toast.error('No data to export')
      return
    }

    const jsonContent = JSON.stringify(data, null, 2)
    const blob = new Blob([jsonContent], { type: 'application/json' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)
    
    toast.success('Data exported successfully')
  }

  const generateReport = () => {
    if (data.length === 0) {
      toast.error('No data to generate report')
      return
    }

    // Calculate basic statistics
    const headers = Object.keys(data[0]).filter(key => key !== 'time')
    const stats = headers.map(header => {
      const values = data.map(d => d[header])
      const min = Math.min(...values)
      const max = Math.max(...values)
      const avg = values.reduce((a, b) => a + b, 0) / values.length
      return { header, min, max, avg }
    })

    // Create HTML report
    const reportHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${title} - Simulation Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .stats { margin: 20px 0; }
          table { border-collapse: collapse; width: 100%; margin: 20px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          .footer { margin-top: 40px; text-align: center; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${title}</h1>
          <p>${description || 'Simulation Data Report'}</p>
          <p>Generated on: ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="stats">
          <h2>Summary Statistics</h2>
          <table>
            <thead>
              <tr>
                <th>Parameter</th>
                <th>Minimum</th>
                <th>Maximum</th>
                <th>Average</th>
              </tr>
            </thead>
            <tbody>
              ${stats.map(stat => `
                <tr>
                  <td>${stat.header}</td>
                  <td>${stat.min.toFixed(4)}</td>
                  <td>${stat.max.toFixed(4)}</td>
                  <td>${stat.avg.toFixed(4)}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div class="data">
          <h2>Raw Data</h2>
          <table>
            <thead>
              <tr>
                ${Object.keys(data[0]).map(key => `<th>${key}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
              ${data.map(row => `
                <tr>
                  ${Object.values(row).map(value => `<td>${typeof value === 'number' ? value.toFixed(4) : value}</td>`).join('')}
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div class="footer">
          <p>Generated by Physics Simulator</p>
        </div>
      </body>
      </html>
    `

    const blob = new Blob([reportHTML], { type: 'text/html' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${title.replace(/\s+/g, '_')}_Report_${new Date().toISOString().split('T')[0]}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)
    
    toast.success('Report generated successfully')
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5" />
          Export Data
        </CardTitle>
        <CardDescription>
          Download simulation data in various formats
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <Button onClick={exportToCSV} className="gap-2">
            <FileText className="h-4 w-4" />
            Export CSV
          </Button>
          <Button onClick={exportToJSON} variant="outline" className="gap-2">
            <FileText className="h-4 w-4" />
            Export JSON
          </Button>
          <Button onClick={generateReport} variant="outline" className="gap-2">
            <ImageIcon className="h-4 w-4" />
            Generate Report
          </Button>
        </div>
        
        <div className="text-sm text-muted-foreground">
          <p><strong>CSV:</strong> Comma-separated values for spreadsheet analysis</p>
          <p><strong>JSON:</strong> Structured data format for programming</p>
          <p><strong>Report:</strong> HTML report with statistics and raw data</p>
        </div>
        
        <div className="bg-muted p-3 rounded text-sm">
          <p><strong>Data Points:</strong> {data.length}</p>
          <p><strong>Parameters:</strong> {data.length > 0 ? Object.keys(data[0]).length : 0}</p>
          <p><strong>Last Updated:</strong> {new Date().toLocaleTimeString()}</p>
        </div>
      </CardContent>
    </Card>
  )
}
